package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

var api_key = os.Getenv("api_key_cmots")
var log_file, _ = os.Create("mf_master_log.log")

type AutoGenerated struct {
	Success bool `json:"success"`
	Data    []struct {
		SchName   string  `json:"sch_Name"`
		MfSchCode float64 `json:"Mf_SchCode"`
		InvDate   string  `json:"InvDate"`
		MktValue  float64 `json:"MktValue"`
		CoCode    float64 `json:"Co_Code"`
		CoName    string  `json:"Co_Name"`
		PercHold  float64 `json:"Perc_Hold"`
		TOTNAV    float64 `json:"TOTNAV"`
		NoShares  float64 `json:"no_shares"`
	} `json:"data"`
	Message string `json:"message"`
}

var day_id int64
var db *sql.DB
var dsn string

func main() {
	log.SetOutput(log_file)
	dsn = os.Getenv("dsn")
	var err error
	db, err = sql.Open("mysql", dsn)
	if err != nil {
		log.Println(err)
	}
	db.SetMaxOpenConns(10)
	db.SetMaxIdleConns(5)
	db.SetConnMaxLifetime(5 * time.Minute)
	db.SetConnMaxIdleTime(time.Minute * 5)
	defer db.Close()
	rows, err := db.Query("call stp_get_all_cocodes_cmots()")
	if err != nil {
		log.Println(err)
	}
	list_cocodes := []int{}
	for rows.Next() {
		var cocode int
		rows.Scan(&cocode)
		list_cocodes = append(list_cocodes, cocode)
	}
	z := 0
	for z == 0 {
		for i := 0; i < len(list_cocodes); i++ {
			stock_wise_mf(list_cocodes[i])
		}
		day_id++
		time.Sleep(time.Hour * 24)
	}

}

func stock_wise_mf(cocode1 int) {
	var mf_obj AutoGenerated
	cocode := strconv.Itoa(cocode1)
	url := fmt.Sprintf("https://insbaapis.cmots.com/api/CompanyWiseMFHolding/%s/100", cocode)

	log.SetOutput(log_file)
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Println(err)
	}
	req.Header.Set("Authorization", "Bearer "+api_key)
	res, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Println(err)
	}
	res_body, err := io.ReadAll(res.Body)
	if err != nil {
		log.Println(err)
	}
	// fmt.Println(string(res_body))
	json.Unmarshal(res_body, &mf_obj)
	fmt.Println(mf_obj)
	var total_shares float64
	for i := 0; i < len(mf_obj.Data); i++ {
		total_shares = total_shares + mf_obj.Data[i].NoShares
	}

	fmt.Println(total_shares)
	log.SetOutput(log_file)

	_, err = db.Exec("call stp_insert_mf_holdings_increment_decrement(?,?,?)", day_id, total_shares, cocode1)
	if err != nil {
		log.Println(err)
	}

}
