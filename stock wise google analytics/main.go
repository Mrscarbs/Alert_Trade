package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
)

var log_file, _ = os.Create("stockwise_analytics.log")

type AutoGenerated2 struct {
	SearchMetadata struct {
		ID               string  `json:"id"`
		Status           string  `json:"status"`
		JSONEndpoint     string  `json:"json_endpoint"`
		CreatedAt        string  `json:"created_at"`
		ProcessedAt      string  `json:"processed_at"`
		GoogleTrendsURL  string  `json:"google_trends_url"`
		RawHTMLFile      string  `json:"raw_html_file"`
		PrettifyHTMLFile string  `json:"prettify_html_file"`
		TotalTimeTaken   float64 `json:"total_time_taken"`
	} `json:"search_metadata"`
	SearchParameters struct {
		Engine   string `json:"engine"`
		Q        string `json:"q"`
		Hl       string `json:"hl"`
		Date     string `json:"date"`
		Tz       string `json:"tz"`
		DataType string `json:"data_type"`
	} `json:"search_parameters"`
	RelatedQueries struct {
		Rising []struct {
			Query          string `json:"query"`
			Value          string `json:"value"`
			ExtractedValue int    `json:"extracted_value"`
			Link           string `json:"link"`
			SerpapiLink    string `json:"serpapi_link"`
		} `json:"rising"`
		Top []struct {
			Query          string `json:"query"`
			Value          string `json:"value"`
			ExtractedValue int    `json:"extracted_value"`
			Link           string `json:"link"`
			SerpapiLink    string `json:"serpapi_link"`
		} `json:"top"`
	} `json:"related_queries"`
}

type AutoGenerated struct {
	SearchMetadata struct {
		ID               string  `json:"id"`
		Status           string  `json:"status"`
		JSONEndpoint     string  `json:"json_endpoint"`
		CreatedAt        string  `json:"created_at"`
		ProcessedAt      string  `json:"processed_at"`
		GoogleTrendsURL  string  `json:"google_trends_url"`
		RawHTMLFile      string  `json:"raw_html_file"`
		PrettifyHTMLFile string  `json:"prettify_html_file"`
		TotalTimeTaken   float64 `json:"total_time_taken"`
	} `json:"search_metadata"`
	SearchParameters struct {
		Engine   string `json:"engine"`
		Q        string `json:"q"`
		Hl       string `json:"hl"`
		Date     string `json:"date"`
		Tz       string `json:"tz"`
		DataType string `json:"data_type"`
	} `json:"search_parameters"`
	InterestOverTime struct {
		TimelineData []struct {
			Date      string `json:"date"`
			Timestamp string `json:"timestamp"`
			Values    []struct {
				Query          string `json:"query"`
				Value          string `json:"value"`
				ExtractedValue int    `json:"extracted_value"`
			} `json:"values"`
		} `json:"timeline_data"`
	} `json:"interest_over_time"`
}

func main() {
	router := gin.Default()
	router.GET("/get_intrest_over_time", intrest_overtime)
	router.GET("/related_queries", related_queries)
	router.Run("0.0.0.0:8084")
}

func intrest_overtime(c *gin.Context) {

	var json_struct AutoGenerated
	log.SetOutput(log_file)
	symbol, _ := c.GetQuery("symbol")
	date, _ := c.GetQuery("interval")
	url := fmt.Sprintf("https://serpapi.com/search.json?engine=google_trends&q=%s&data_type=TIMESERIES&api_key=9323e5c8579e20323fac0e2440bc687c190754379431ddaccd08090ac22d2305&date=%s", symbol, date)
	//url := fmt.S("https://serpapi.com/search.json?engine=google_trends&q=coffee,milk,bread,pasta,steak&data_type=TIMESERIES")

	res, err := http.Get(url)
	if err != nil {
		log.Println(err)
	}

	res_body, err := io.ReadAll(res.Body)
	if err != nil {
		log.Println(err)
	}

	fmt.Println(string(res_body))

	err = json.Unmarshal(res_body, &json_struct)
	if err != nil {
		log.Println(err)
	}
	c.IndentedJSON(http.StatusOK, json_struct)
}

func related_queries(c *gin.Context) {
	var json_struct AutoGenerated2
	log.SetOutput(log_file)
	symbol, _ := c.GetQuery("symbol")

	url := fmt.Sprintf("https://serpapi.com/search.json?engine=google_trends&q=%s&data_type=RELATED_QUERIES&api_key=9323e5c8579e20323fac0e2440bc687c190754379431ddaccd08090ac22d2305&", symbol)
	//url := fmt.S("https://serpapi.com/search.json?engine=google_trends&q=coffee,milk,bread,pasta,steak&data_type=TIMESERIES")

	res, err := http.Get(url)
	if err != nil {
		log.Println(err)
	}

	res_body, err := io.ReadAll(res.Body)
	if err != nil {
		log.Println(err)
	}

	fmt.Println(string(res_body))
	err = json.Unmarshal(res_body, &json_struct)
	if err != nil {
		log.Println(err)
	}

	c.IndentedJSON(http.StatusOK, &json_struct)

}
